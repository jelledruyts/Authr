@{
    Layout = "_LayoutCore";
}
@model AuthViewModel
@section Scripts {
<script type="text/javascript">
toastr.options = {
    'showMethod': 'show',
    'hideMethod': 'hide'
};
new ClipboardJS('.btn-copy');

var app = new Vue({
    el: '#app',
    data: function() {
        return {
            requestParameters: null,
            response: null,
            flow: null,
            userConfiguration: null,
            requestOptions: {
                saveIdentityService: false,
                saveIdentityServiceAsName: null,
                saveClientApplication: false,
                saveClientApplicationAsName: null,
                saveRequestTemplate: false,
                saveRequestTemplateAsName: null
            },
            requestTemplateId: null,
            selectedIdentityService: null,
            encodedToken: null,
            processing: false,
            validationMessage: null,
            errorMessage: null
        }
    },
    computed: {
        userSignedIn: function () {
            return this.userConfiguration !== null;
        }
    },
    filters: {
        datetime: function (value) {
            if (value == null) {
                return null;
            }
            return new Date(value).toLocaleString();
        }
    },
    watch: {
        'response': function(newValue, oldValue) {
            if (this.response) {
                this.showTab('mainTabHeaderResponse');
            }
        },
        'requestTemplateId': function(newValue, oldValue) {
            if (this.userConfiguration) {
                var requestTemplate = this.findById(this.userConfiguration.requestTemplates, newValue);
                if (requestTemplate !== null) {
                    // Set the request parameters to a clone of the template's request parameters.
                    this.requestParameters = JSON.parse(JSON.stringify(requestTemplate.requestParameters));
                }
            }
        },
        'requestParameters.requestType': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.scope': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.responseMode': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.responseType': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.identityServiceId': function(newValue, oldValue) {
            if (this.userConfiguration) {
                var identityService = this.findById(this.userConfiguration.identityServices, newValue);
                if (identityService !== null) {
                    this.requestParameters.metadataEndpoint = identityService.metadataEndpoint;
                    this.requestParameters.authorizationEndpoint = identityService.authorizationEndpoint;
                    this.requestParameters.tokenEndpoint = identityService.tokenEndpoint;
                    this.requestParameters.deviceCodeEndpoint = identityService.deviceCodeEndpoint;

                    // Check if the current client application is part of the current identity service.
                    var clientApplication = this.findById(identityService.clientApplications, this.requestParameters.clientApplicationId);
                    if (clientApplication === null || clientApplication.id !== this.requestParameters.clientApplicationId) {
                        // If not, ensure no client application is set.
                        this.requestParameters.clientApplicationId = null;
                    }
                } else {
                    // There is no identity service, also ensure no client application is set.
                    this.requestParameters.clientApplicationId = null;
                }
                this.selectedIdentityService = identityService;
            }
        },
        'requestParameters.clientApplicationId': function(newValue, oldValue) {
            if (this.selectedIdentityService !== null) {
                var clientApplication = this.findById(this.selectedIdentityService.clientApplications, newValue);
                if (clientApplication !== null) {
                    this.requestParameters.clientId = clientApplication.clientId;
                    this.requestParameters.clientSecret = clientApplication.clientSecret;
                }
            }
        }
    },
    methods: {
        showTab: function(tabHeaderId) {
            setTimeout(() => {
                // This is executed after Vue rendering is complete; trigger a call to show the tab.
                $('#' + tabHeaderId).tab('show');
                // Scroll to the top already (the tab is showing asynchronously so that's not complete yet).
                document.getElementById('mainTabHeader').scrollIntoView();
            }, 0);
        },
        findById: function(array, id) {
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    if (array[i].id === id) {
                        return array[i];
                    }
                }
            }
            return null;
        },
        validateParameters: function() {
            this.validationMessage = '';
            if (this.requestParameters.requestType === '@Constants.RequestTypes.OpenIdConnect') {
                // Make sure 'openid' is part of the requested scopes (https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                if (this.requestParameters.scope === null || (' ' + this.requestParameters.scope + ' ').indexOf('openid') < 0) {
                    this.validationMessage += 'The scope must include "openid" for an OpenID Connect request. ';
                }
            }
            if (this.requestParameters.requestType === '@Constants.RequestTypes.Implicit') {
                // Make sure response mode is not set and response type is set to 'token' (https://tools.ietf.org/html/rfc6749#section-4.2.1).
                if (this.requestParameters.responseType !== 'token') {
                    this.validationMessage += 'The response type should be set to "token" for an OAuth 2.0 Implicit Grant request. ';
                }
                if (this.requestParameters.responseMode) {
                    this.validationMessage += 'The response mode should not be set for an OAuth 2.0 Implicit Grant request. ';
                }
            }
            if (this.requestParameters.requestType === '@Constants.RequestTypes.AuthorizationCode') {
                // Make sure response mode is not set and response type is set to 'code' (https://tools.ietf.org/html/rfc6749#section-3.1.1).
                if (this.requestParameters.responseType !== 'code') {
                    this.validationMessage += 'The response type should be set to "code" for an OAuth 2.0 Authorization Code request. ';
                }
                if (this.requestParameters.responseMode) {
                    this.validationMessage += 'The response mode should not be set for an OAuth 2.0 Authorization Code request. ';
                }
            }
        },
        prepareDeviceTokenRequestParameters: function(deviceCode) {
            this.requestParameters.requestType = '@Constants.RequestTypes.DeviceToken';
            this.requestParameters.deviceCode = deviceCode;
            this.showTab('mainTabHeaderRequest');
        },
        prepareRefreshTokenRequestParameters: function(refreshToken) {
            this.requestParameters.requestType = '@Constants.RequestTypes.RefreshToken';
            this.requestParameters.refreshToken = refreshToken;
            this.showTab('mainTabHeaderRequest');
        },
        submitRequest: function() {
            var requestValue = {
                requestParameters: this.requestParameters,
                options: this.requestOptions
            };
            this.submit('request', requestValue);
        },
        submitResponse: function(response) {
            this.submit('response', response);
        },
        submit: function(path, value) {
            this.response = null;
            this.flow = null;
            this.processing = true;
            this.errorMessage = null;
            axios.post('/api/' + path, value)
                .then(response => {
                    // Make sure to also set the requestParameters coming back, e.g. to get the request parameter details
                    // for a previous request that was now responded to through a URL #fragment (e.g. implicit flow).
                    this.requestParameters = response.data.requestParameters;
                    this.response = response.data.response;
                    if (response.data.userConfiguration) {
                        this.userConfiguration = response.data.userConfiguration;
                    }
                    this.flow = response.data.flow;
                    this.requestOptions.saveIdentityService = false;
                    this.requestOptions.saveClientApplication = false;
                    this.requestOptions.saveRequestTemplate = false;
                    if (response.data.requestedRedirectUrl) {
                        window.location.replace(response.data.requestedRedirectUrl);
                    } else {
                        this.processing = false;
                    }
                })
                .catch(error => {
                    console.log(error);
                    this.errorMessage = error.message;
                    toastr.error(error.message);
                    this.processing = false;
                });
        },
        decodeToken: function (token) {
            var decodedJwt = this.decodeJwt(token);
            if (decodedJwt && decodedJwt.header && decodedJwt.body) {
                return JSON.stringify(decodedJwt.header, null, 2) + "." + JSON.stringify(decodedJwt.body, null, 2);
            }
            return 'Invalid token';
        },
        decodeJwt: function (jwt) {
            if (jwt) {
                var jwtParts = jwt.split('.');
                if (jwtParts.length > 1) {
                    var signature = null;
                    if (jwtParts.length > 2) {
                        signature: jwtParts[2];
                    }
                    return {
                        header: this.decodeJwtPart(jwtParts[0]),
                        body: this.decodeJwtPart(jwtParts[1]),
                        signature: signature
                    };
                }
            }
            return null;
        },
        decodeJwtPart: function (jwtPart) {
            try {
                var jwtPartBase64 = jwtPart.replace(/-/g, '+').replace(/_/g, '/');
                var jwtPartJson = decodeURIComponent(atob(jwtPartBase64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jwtPartJson);
            } catch (e) {
                return null;
            }
        },
        deleteItem: function(array, value) {
            array.splice(array.indexOf(value), 1);
        },
        moveItemUp: function(array, value) {
            var index = array.indexOf(value);
            array.splice(index, 1);
            array.splice(index - 1, 0, value);
        },
        moveItemDown: function(array, value) {
            var index = array.indexOf(value);
            array.splice(index, 1);
            array.splice(index + 1, 0, value);
        },
        addIdentityService: function(array) {
            array.push({ clientApplications: []});
        },
        addClientApplication: function(array) {
            array.push({});
        },
        saveUserConfiguration: function() {
            this.processing = true;
            this.errorMessage = null;
            axios.post('/api/userConfiguration', this.userConfiguration)
                .then(response => {
                    this.userConfiguration = response.data;
                    this.processing = false;
                    toastr.success('Configuration saved successfully');
                })
                .catch(error => {
                    console.log(error);
                    this.errorMessage = error.message;
                    toastr.error(error.message);
                    this.processing = false;
                });
        }
    },
    created: function () {
        this.requestParameters = @Html.Raw(Json.Serialize(Model.RequestParameters));
        this.response = @Html.Raw(Json.Serialize(Model.Response));
        this.flow = @Html.Raw(Json.Serialize(Model.Flow));
        this.userConfiguration = @Html.Raw(Json.Serialize(Model.UserConfiguration));
        if (location.hash && location.hash.length > 1) {
            if (location.hash === '#request') {
                this.showTab('mainTabHeaderRequest');
            }
            else if (location.hash === '#token') {
                this.showTab('mainTabHeaderToken');
            }
            else if (location.hash === '#configuration') {
                this.showTab('mainTabHeaderConfiguration');
            }
            else {
                // If there are parameters in the #fragment of the URL, this is likely an external auth response;
                // send it to the back-end API for processing.
                const urlFragment = location.hash.substr(1).split('&').reduce((prev, item) => Object.assign({[decodeURIComponent(item.split('=')[0]).replace(/\+/g, ' ')]: decodeURIComponent(item.split('=')[1]).replace(/\+/g, ' ')}, prev), {});
                this.submitResponse(urlFragment);
            }
        }
    }
});
</script>
}
@section Menu {
<ul class="nav navbar-nav flex-grow-1" id="mainTabHeader" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="mainTabHeaderRequest" data-toggle="tab" href="#mainTabPageRequest" role="tab" aria-controls="mainTabPageRequest" aria-selected="true">New Request</a>
    </li>
    <li class="nav-item" v-if="response">
        <a class="nav-link" id="mainTabHeaderResponse" data-toggle="tab" href="#mainTabPageResponse" role="tab" aria-controls="mainTabPageResponse" aria-selected="false">Response</a>
    </li>
    <li class="nav-item" v-if="flow">
        <a class="nav-link" id="mainTabHeaderFlow" data-toggle="tab" href="#mainTabPageFlow" role="tab" aria-controls="mainTabPageFlow" aria-selected="false">Flow</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="mainTabHeaderToken" data-toggle="tab" href="#mainTabPageToken" role="tab" aria-controls="mainTabPageToken" aria-selected="false">Decode Token</a>
    </li>
    <li class="nav-item" v-if="userSignedIn">
        <a class="nav-link" id="mainTabHeaderConfiguration" data-toggle="tab" href="#mainTabPageConfiguration" role="tab" aria-controls="mainTabPageConfiguration" aria-selected="false">Configuration</a>
    </li>
</ul>
}
<div v-cloak>
    <form>
        <div class="tab-content" id="mainTabContent">
            <div class="tab-pane fade show active" id="mainTabPageRequest" role="tabpanel" aria-labelledby="mainTabHeaderRequest">

                <div id="requestTemplate-panel" class="card mt-3" v-if="userSignedIn && userConfiguration.requestTemplates.length > 0">
                    <div class="card-header">Request Template</div>
                    <div class="card-body">
                        <div class="form-group">
                            <select class="form-control" id="requestTemplateId" v-model="requestTemplateId">
                                <option v-bind:value="null">None</option>
                                <option v-for="requestTemplate in userConfiguration.requestTemplates" v-bind:value="requestTemplate.id">{{ requestTemplate.name }}</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div id="identityService-panel" class="card mt-3">
                    <div class="card-header">Identity Service</div>
                    <div class="card-body">
                        <div class="form-group" v-if="userSignedIn && userConfiguration.identityServices.length > 0">
                            <select class="form-control" id="requestParameters-identityServiceId" v-model="requestParameters.identityServiceId">
                                <option v-bind:value="null">Custom</option>
                                <option v-for="identityService in userConfiguration.identityServices" v-bind:value="identityService.id">{{ identityService.name }}</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="requestParameters-authorizationEndpoint">Authorization Endpoint</label>
                            <input type="text" class="form-control" id="requestParameters-authorizationEndpoint" v-model="requestParameters.authorizationEndpoint" v-bind:readonly="requestParameters.identityServiceId !== null" placeholder="Enter the URL of the authorization endpoint">
                        </div>
                        <div class="form-group">
                            <label for="requestParameters-tokenEndpoint">Token Endpoint</label>
                            <input type="text" class="form-control" id="requestParameters-tokenEndpoint" v-model="requestParameters.tokenEndpoint" v-bind:readonly="requestParameters.identityServiceId !== null" placeholder="Enter the URL of the token endpoint">
                        </div>
                        <div class="form-group">
                            <label for="requestParameters-deviceCodeEndpoint">Device Code Endpoint</label>
                            <input type="text" class="form-control" id="requestParameters-deviceCodeEndpoint" v-model="requestParameters.deviceCodeEndpoint" v-bind:readonly="requestParameters.identityServiceId !== null" placeholder="Enter the URL of the device code endpoint">
                        </div>
                    </div>
                </div>

                <div id="clientApp-panel" class="card mt-3">
                    <div class="card-header">Client App</div>
                    <div class="card-body">
                        <div class="form-group" v-if="userSignedIn && selectedIdentityService != null && selectedIdentityService.clientApplications.length > 0">
                            <select class="form-control" id="requestParameters-clientApplicationId" v-model="requestParameters.clientApplicationId">
                                <option v-bind:value="null">Custom</option>
                                <option v-for="clientApplication in selectedIdentityService.clientApplications" v-bind:value="clientApplication.id">{{ clientApplication.name }}</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="requestParameters-clientId">Client ID</label>
                            <input type="text" class="form-control" id="requestParameters-clientId" v-model="requestParameters.clientId" v-bind:readonly="requestParameters.clientApplicationId !== null" placeholder="Enter the client id of the app registered with the identity service">
                        </div>
                        <div class="form-group">
                            <label for="requestParameters-clientSecret">Client Secret</label>
                            <input type="password" class="form-control" id="requestParameters-clientSecret" v-model="requestParameters.clientSecret" v-bind:readonly="requestParameters.clientApplicationId !== null" placeholder="Enter the client secret of the app registered with the identity service">
                        </div>
                    </div>
                </div>

                <div id="requestParameters-panel" class="card mt-3">
                    <div class="card-header">Request Parameters</div>
                    <div class="card-body">
                        <div class="mb-2">
                            <label>Flow</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-openIdConnect" value="@Constants.RequestTypes.OpenIdConnect" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-openIdConnect">OpenID Connect</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-implicit" value="@Constants.RequestTypes.Implicit" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-implicit">OAuth 2.0 Implicit Grant</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-authorizationCode" value="@Constants.RequestTypes.AuthorizationCode" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-authorizationCode">OAuth 2.0 Authorization Code Grant</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-clientCredentials" value="@Constants.RequestTypes.ClientCredentials" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-clientCredentials">OAuth 2.0 Client Credentials Grant</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-refreshToken" value="@Constants.RequestTypes.RefreshToken" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-refreshToken">OAuth 2.0 Refresh Token Grant</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-resourceOwnerPasswordCredentials" value="@Constants.RequestTypes.ResourceOwnerPasswordCredentials" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-resourceOwnerPasswordCredentials">OAuth 2.0 Resource Owner Password Credentials Grant</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-deviceCode" value="@Constants.RequestTypes.DeviceCode" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-deviceCode">OAuth 2.0 Device Authorization Grant - Code Request</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-deviceToken" value="@Constants.RequestTypes.DeviceToken" v-model="requestParameters.requestType">
                                <label class="form-check-label" for="requestParameters-requestType-deviceToken">OAuth 2.0 Device Authorization Grant - Token Request</label>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="requestParameters-scope">Scope</label>
                            <input type="text" class="form-control" id="requestParameters-scope" v-model="requestParameters.scope" placeholder="Enter the scope to request">
                        </div>

                        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.OpenIdConnect' || requestParameters.requestType === '@Constants.RequestTypes.Implicit' || requestParameters.requestType === '@Constants.RequestTypes.AuthorizationCode'">
                            <div class="form-group">
                                <label for="requestParameters-responseType">Response Type (<code>id_token</code>, <code>token</code>, <code>code</code>, ...)</label>
                                <input type="text" class="form-control" id="requestParameters-responseType" v-model="requestParameters.responseType" placeholder="Enter the response type">
                            </div>
                            <div class="form-group">
                                <label for="requestParameters-responseMode">Response Mode (<code>form_post</code>, <code>query</code>, <code>fragment</code>, ...)</label>
                                <input type="text" class="form-control" id="requestParameters-responseMode" v-model="requestParameters.responseMode" placeholder="Enter the response mode">
                            </div>
                            <div class="form-group">
                                <label for="requestParameters-redirectUri">Redirect URI</label>
                                <input type="text" class="form-control" id="requestParameters-redirectUri" v-model="requestParameters.redirectUri" placeholder="Enter the redirect URI (reply URL) where to send the authentication response after completion">
                            </div>
                        </div>

                        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.RefreshToken'">
                            <div class="form-group">
                                <label for="requestParameters-deviceCode">Refresh Token</label>
                                <input type="text" class="form-control" id="requestParameters-refreshToken" v-model="requestParameters.refreshToken" placeholder="Enter the refresh token">
                            </div>
                        </div>

                        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.DeviceToken'">
                            <div class="form-group">
                                <label for="requestParameters-deviceCode">Device Code</label>
                                <input type="text" class="form-control" id="requestParameters-deviceCode" v-model="requestParameters.deviceCode" placeholder="Enter the device code">
                            </div>
                        </div>

                        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.ResourceOwnerPasswordCredentials'">
                            <div class="form-group">
                                <label for="requestParameters-userName">User Name</label>
                                <input type="text" class="form-control" id="requestParameters-userName" v-model="requestParameters.userName" placeholder="Enter the user name of the resource owner">
                            </div>
                            <div class="form-group">
                                <label for="requestParameters-password">Password</label>
                                <input type="password" class="form-control" id="requestParameters-password" v-model="requestParameters.password" placeholder="Enter the password of the resource owner">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="requestParameters-additionalParameters">Additional Parameters</label>
                            <input type="text" class="form-control" id="requestParameters-additionalParameters" v-model="requestParameters.additionalParameters" placeholder="Enter any additional parameters to pass to the identity service, in query string format (key1=value1&amp;key2=value2...)">
                        </div>
                    </div>
                </div>

                <div id="save-panel" class="card mt-3">
                    <div class="card-header">Save to your configuration for later</div>
                    <div class="card-body">
                        <div v-if="!userSignedIn" class="card-text">Please <a asp-area="AzureADB2C" asp-controller="Account" asp-action="SignIn">sign in</a> if you want to save these details and easily use them again later.</div>
                        <div v-if="userSignedIn" class="form-group">
                            <div class="form-group row mt-2">
                                <div class="col-sm-3 form-check">
                                    <input type="checkbox" id="saveIdentityService" v-model="requestOptions.saveIdentityService">
                                    <label class="form-check-label col-form-label ml-1" for="saveIdentityService">Identity Service</label>
                                </div>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" placeholder="Enter the name of the Identity Service to save this as" v-bind:disabled="!requestOptions.saveIdentityService" v-model="requestOptions.saveIdentityServiceAsName" required>
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <div class="col-sm-3 form-check">
                                    <input type="checkbox" id="saveClientApplication" v-model="requestOptions.saveClientApplication" v-bind:disabled="!(requestOptions.saveIdentityService || requestParameters.identityServiceId !== null)">
                                    <label class="form-check-label col-form-label ml-1" for="saveClientApplication">Client App</label>
                                </div>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" placeholder="Enter the name of the Client App to save this as" v-bind:disabled="!requestOptions.saveClientApplication" v-model="requestOptions.saveClientApplicationAsName">
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <div class="col-sm-3 form-check">
                                    <input type="checkbox" id="saveRequestTemplate" v-model="requestOptions.saveRequestTemplate">
                                    <label class="form-check-label col-form-label ml-1" for="saveRequestTemplate">Request Template</label>
                                </div>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" placeholder="Enter the name of the request template to save this as" v-bind:disabled="!requestOptions.saveRequestTemplate" v-model="requestOptions.saveRequestTemplateAsName">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div v-if="validationMessage" class="mt-2">
                    <div class="alert alert-warning">{{ validationMessage }}</div>
                </div>

                <button id="submitRequestButton" v-on:click="submitRequest()" class="btn btn-primary mt-3" v-bind:disabled="processing" type="button">Submit <i class="fas fa-sign-in-alt"></i> <i v-if="processing" class="fas fa-spinner fa-spin"></i></button>

                <div v-if="errorMessage" class="mt-2">
                    <div class="alert alert-danger">{{ errorMessage }}</div>
                </div>

            </div>
            <div class="tab-pane fade" id="mainTabPageResponse" role="tabpanel" aria-labelledby="mainTabHeaderResponse" v-if="response">

                <div v-if="response.error">
                    <h5 class="mt-3">Error</h5>
                    <div class="alert alert-danger">
                        <h4 class="alert-heading">{{ response.error }}</h4>
                        <div v-if="response.errorDescription">{{ response.errorDescription }}</div>
                    </div>
                </div>

                <div v-if="response.deviceCode">
                    <h5 class="mt-3">Device Code</h5>
                    <div>To sign in, use a web browser to open the page <a v-bind:href="response.deviceCodeVerificationUri" target="_blank">{{ response.deviceCodeVerificationUri }}</a> and enter the code <code>{{ response.deviceUserCode }}</code> to authenticate.</div>
                    <button v-on:click="prepareDeviceTokenRequestParameters(response.deviceCode)" class="btn btn-primary mt-2" type="button">Prepare Device Token Request</button>
                </div>

                <div v-if="response.idToken">
                    <h5 class="mt-3">ID Token</h5>
                    <div class="input-group mt-2">
                        <input type="text" class="form-control text-monospace" id="response-idToken" v-model="response.idToken" readonly>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary btn-copy" data-clipboard-target="#response-idToken" title="Copy to clipboard"><i class="far fa-copy"></i></button>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <pre><code>{{ decodeToken(response.idToken) }}</code></pre>
                        </div>
                    </div>
                </div>

                <div v-if="response.accessToken">
                    <h5 class="mt-3">Access Token</h5>
                    <div v-if="response.tokenType">Token Type: <code>{{ response.tokenType }}</code></div>
                    <div v-if="response.expiresIn">Expires In: <code>{{ response.expiresIn }}</code></div>
                    <div class="input-group mt-2">
                        <input type="text" class="form-control text-monospace" id="response-accessToken" v-model="response.accessToken" readonly>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary btn-copy" data-clipboard-target="#response-accessToken" title="Copy to clipboard"><i class="far fa-copy"></i></button>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <pre><code>{{ decodeToken(response.accessToken) }}</code></pre>
                        </div>
                    </div>
                </div>

                <div v-if="response.refreshToken">
                    <h5 class="mt-3">Refresh Token</h5>
                    <div class="input-group mt-2">
                        <input type="text" class="form-control text-monospace" id="response-refreshToken" v-model="response.refreshToken" readonly>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary btn-copy" data-clipboard-target="#response-refreshToken" title="Copy to clipboard"><i class="far fa-copy"></i></button>
                        </div>
                    </div>
                    <button v-on:click="prepareRefreshTokenRequestParameters(response.refreshToken)" class="btn btn-primary mt-2" type="button">Prepare Refresh Token Request</button>
                </div>

                <div v-if="response.raw">
                    <h5 class="mt-3">Raw Response</h5>
                    <div class="input-group mt-2">
                        <input type="textarea" class="form-control text-monospace" id="response-raw" v-model="response.raw" readonly>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary btn-copy" data-clipboard-target="#response-raw" title="Copy to clipboard"><i class="far fa-copy"></i></button>
                        </div>
                    </div>
                </div>

            </div>
            <div class="tab-pane fade" id="mainTabPageFlow" role="tabpanel" aria-labelledby="mainTabHeaderFlow" v-if="flow">

                <h5 class="mt-3">Flow</h5>
                <div v-if="flow.requestType">Request type: <code>{{ flow.requestType }}</code></div>
                <div v-if="flow.timeCreated">Started: <code>{{ flow.timeCreated | datetime }}</code></div>
                <div>
                    <input type="checkbox" id="flow-isComplete" v-model="flow.isComplete" disabled>
                    <label class="form-check-label col-form-label ml-1" for="flow-isComplete">Flow has completed?</label>
                </div>

                <ol class="list-unstyled">
                    <li v-for="(request, requestIndex) in flow.requests">
                        <h5 class="mt-3">Request #<span>{{ requestIndex + 1 }}</span></h5>
                        <div>
                            <input type="checkbox" id="request-isInitiatedExternally" v-model="request.isInitiatedExternally" disabled>
                            <label class="form-check-label col-form-label ml-1" for="request-isInitiatedExternally">Request was initiated externally?</label>
                        </div>
                        <div v-if="request.timeCreated">Sent: <code>{{ request.timeCreated | datetime }}</code></div>
                        <div v-if="request.requestedRedirectUrl">Requested Redirect URL: <code>{{ request.requestedRedirectUrl }}</code></div>
                        <div v-if="request.parameters">
                            <div>Parameters:</div>
                            <div class="card">
                                <div class="card-body">
                                    <pre><code>{{ request.parameters }}</code></pre>
                                </div>
                            </div>
                        </div>

                        <div v-if="request.response">
                            <h5 class="mt-3">Response #<span>{{ requestIndex + 1 }}</span></h5>
                            <div v-if="request.response.timeCreated">Received: <code>{{ request.response.timeCreated | datetime }}</code></div>
                            <div class="card">
                                <div class="card-body">
                                    <pre><code>{{ request.response }}</code></pre>
                                </div>
                            </div>
                        </div>
                    </li>
                </ol>

                <div v-if="flow.timeCompleted">
                    <h5 class="mt-3">End</h5>
                    <div>Completed: <code>{{ flow.timeCompleted | datetime }}</code></div>
                </div>

            </div>
            <div class="tab-pane fade" id="mainTabPageToken" role="tabpanel" aria-labelledby="mainTabHeaderToken">
                
                <h5 class="mt-3">Encoded Token</h5>

                <div class="form-group mt-3">
                    <textarea class="form-control text-monospace text-smaller" rows="10" v-model="encodedToken"></textarea>
                </div>

                <h5 class="mt-3">Decoded Token</h5>
                <div class="card">
                    <div class="card-body">
                        <pre><code>{{ decodeToken(encodedToken) }}</code></pre>
                    </div>
                </div>

            </div>
            <div class="tab-pane fade" id="mainTabPageConfiguration" role="tabpanel" aria-labelledby="mainTabHeaderConfiguration" v-if="userConfiguration">
                
                <h5 class="mt-3">Configuration</h5>

                <div v-if="userConfiguration.requestTemplates.length > 0" class="mt-3">
                    <h6>Request Templates</h6>
                    <div class="input-group mt-3" v-for="(requestTemplate, requestTemplateIndex) in userConfiguration.requestTemplates">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="far fa-file-alt mr-1" title="Request Template"></i> {{ requestTemplateIndex + 1 }}</span>
                        </div>
                        <input type="text" class="form-control" placeholder="Enter the name of the request template" v-model="requestTemplate.name">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemUp(userConfiguration.requestTemplates, requestTemplate)" title="Move this request template up in the list" v-bind:disabled="requestTemplateIndex === 0"><i class="fas fa-chevron-up"></i></button>
                            <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemDown(userConfiguration.requestTemplates, requestTemplate)" title="Move this request template down in the list" v-bind:disabled="requestTemplateIndex === userConfiguration.requestTemplates.length - 1"><i class="fas fa-chevron-down"></i></button>
                            <button class="btn btn-outline-danger" type="button" v-on:click="deleteItem(userConfiguration.requestTemplates, requestTemplate)" title="Delete this request template"><i class="far fa-trash-alt"></i></button>
                        </div>
                    </div>
                </div>

                <div v-if="userConfiguration.identityServices.length > 0" class="mt-5">
                    <h6>Identity Services</h6>
                    <div v-for="(identityService, identityServiceIndex) in userConfiguration.identityServices">
                        <div class="input-group mt-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="far fa-id-badge mr-1" title="Identity Service"></i> {{ identityServiceIndex + 1 }}</span>
                            </div>
                            <input type="text" class="form-control" placeholder="Enter the name of the Identity Service" v-model="identityService.name">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" data-toggle="collapse" v-bind:data-target="'#userConfiguration-identityServiceDetails-' +  identityServiceIndex" title="Edit this Identity Service"><i class="fas fa-pencil-alt"></i></button>
                                <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemUp(userConfiguration.identityServices, identityService)" title="Move this Identity Service up in the list" v-bind:disabled="identityServiceIndex === 0"><i class="fas fa-chevron-up"></i></button>
                                <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemDown(userConfiguration.identityServices, identityService)" title="Move this Identity Service down in the list" v-bind:disabled="identityServiceIndex === userConfiguration.identityServices.length - 1"><i class="fas fa-chevron-down"></i></button>
                                <button class="btn btn-outline-danger" type="button" v-on:click="deleteItem(userConfiguration.identityServices, identityService)" title="Delete this Identity Service"><i class="far fa-trash-alt"></i></button>
                            </div>
                        </div>
                        <div class="collapse" v-bind:id="'userConfiguration-identityServiceDetails-' +  identityServiceIndex">
                            <div class="card card-body">
                                <div class="form-group">
                                    <label for="userConfiguration-authorizationEndpoint">Authorization Endpoint</label>
                                    <input type="text" class="form-control" v-bind:id="'userConfiguration-authorizationEndpoint-' +  identityServiceIndex" v-model="identityService.authorizationEndpoint" placeholder="Enter the URL of the authorization endpoint">
                                </div>
                                <div class="form-group">
                                    <label for="userConfiguration-tokenEndpoint">Token Endpoint</label>
                                    <input type="text" class="form-control" v-bind:id="'userConfiguration-tokenEndpoint-' +  identityServiceIndex" v-model="identityService.tokenEndpoint" placeholder="Enter the URL of the token endpoint">
                                </div>
                                <div class="form-group">
                                    <label for="userConfiguration-deviceCodeEndpoint">Device Code Endpoint</label>
                                    <input type="text" class="form-control" v-bind:id="'userConfiguration-deviceCodeEndpoint-' +  identityServiceIndex" v-model="identityService.deviceCodeEndpoint" placeholder="Enter the URL of the device code endpoint">
                                </div>
                                <h6 class="mt-2">Client Apps</h6>
                                <div>
                                    <div v-for="(clientApplication, clientApplicationIndex) in identityService.clientApplications">
                                        <div class="mt-3 input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-mobile-alt mr-1" title="Client App"></i> {{ clientApplicationIndex + 1 }}</span>
                                            </div>
                                            <input type="text" class="form-control" placeholder="Enter the name of the Client Application" v-model="clientApplication.name">
                                            <div class="input-group-append">
                                                <button class="btn btn-outline-secondary" type="button" data-toggle="collapse" v-bind:data-target="'#userConfiguration-clientApplicationDetails-' +  identityServiceIndex + '-' + clientApplicationIndex" title="Edit this Client Application"><i class="fas fa-pencil-alt"></i></button>
                                                <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemUp(identityService.clientApplications, clientApplication)" title="Move this Client Application up in the list" v-bind:disabled="clientApplicationIndex === 0"><i class="fas fa-chevron-up"></i></button>
                                                <button class="btn btn-outline-secondary" type="button" v-on:click="moveItemDown(identityService.clientApplications, clientApplication)" title="Move this Client Application down in the list" v-bind:disabled="clientApplicationIndex === identityService.clientApplications.length - 1"><i class="fas fa-chevron-down"></i></button>
                                                <button class="btn btn-outline-danger" type="button" v-on:click="deleteItem(identityService.clientApplications, clientApplication)" title="Delete this Client Application"><i class="far fa-trash-alt"></i></button>
                                            </div>
                                        </div>
                                        <div class="collapse" v-bind:id="'userConfiguration-clientApplicationDetails-' +  identityServiceIndex + '-' + clientApplicationIndex">
                                            <div class="card card-body">
                                                <div class="form-group">
                                                    <label for="userConfiguration-clientId">Client ID</label>
                                                    <input type="text" class="form-control" v-bind:id="'userConfiguration-clientId-' +  identityServiceIndex + '-' + clientApplicationIndex" v-model="clientApplication.clientId" placeholder="Enter the client id of the app registered with the identity service">
                                                </div>
                                                <div class="form-group">
                                                    <label for="userConfiguration-clientSecret">Client Secret</label>
                                                    <input type="password" class="form-control" v-bind:id="'userConfiguration-clientSecret-' +  identityServiceIndex + '-' + clientApplicationIndex" v-model="clientApplication.clientSecret" placeholder="Enter the client secret of the app registered with the identity service">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="btn btn-secondary mt-3" type="button" v-on:click="addClientApplication(identityService.clientApplications)"><i class="fas fa-plus"></i> Add Client App</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-secondary mt-3" type="button" v-on:click="addIdentityService(userConfiguration.identityServices)"><i class="fas fa-plus"></i> Add Identity Service</button>
                </div>

                <button v-on:click="saveUserConfiguration()" class="btn btn-primary mt-5" v-bind:disabled="processing" type="button"><i class="fas fa-save"></i> Save Configuration <i v-if="processing" class="fas fa-spinner fa-spin"></i></button>

            </div>
        </div>
    </form>
</div>