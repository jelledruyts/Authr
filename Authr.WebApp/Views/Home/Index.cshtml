@model AuthViewModel
@section Scripts {
<script type="text/javascript">
toastr.options = {
    'showMethod': 'show',
    'hideMethod': 'hide'
}

var app = new Vue({
    el: '#app',
    data: function() {
        return {
            requestParameters: null,
            response: null,
            flow: null,
            userConfiguration: null,
            processing: false,
            validationMessage: null,
            errorMessage: null,
        }
    },
    watch: {
        'response': function(newValue, oldValue) {
            if (this.response) {
                this.scrollToAnchor('response-panel');
            }
        },
        'requestParameters.requestType': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.scope': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.responseMode': function(newValue, oldValue) {
            this.validateParameters();
        },
        'requestParameters.responseType': function(newValue, oldValue) {
            this.validateParameters();
        }
    },
    methods: {
        scrollToAnchor: function(anchor) {
            setTimeout(() => {
                // This is executed after rendering is complete; trigger a scroll to the anchor.
                document.getElementById(anchor).scrollIntoView();
            }, 0);
        },
        validateParameters: function() {
            this.validationMessage = '';
            if (this.requestParameters.requestType === '@Constants.RequestTypes.OpenIdConnect') {
                // Make sure 'openid' is part of the requested scopes (https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                if (this.requestParameters.scope === null || (' ' + this.requestParameters.scope + ' ').indexOf('openid') < 0) {
                    this.validationMessage += 'The scope must include "openid" for an OpenID Connect request. ';
                }
            }
            if (this.requestParameters.requestType === '@Constants.RequestTypes.Implicit') {
                // Make sure response mode is not set and response type is set to 'token' (https://tools.ietf.org/html/rfc6749#section-4.2.1).
                if (this.requestParameters.responseType !== 'token') {
                    this.validationMessage += 'The response type should be set to "token" for an OAuth 2.0 Implicit Grant request. ';
                }
                if (this.requestParameters.responseMode) {
                    this.validationMessage += 'The response mode should not be set for an OAuth 2.0 Implicit Grant request. ';
                }
            }
            if (this.requestParameters.requestType === '@Constants.RequestTypes.AuthorizationCode') {
                // Make sure response mode is not set and response type is set to 'code' (https://tools.ietf.org/html/rfc6749#section-3.1.1).
                if (this.requestParameters.responseType !== 'code') {
                    this.validationMessage += 'The response type should be set to "code" for an OAuth 2.0 Authorization Code request. ';
                }
                if (this.requestParameters.responseMode) {
                    this.validationMessage += 'The response mode should not be set for an OAuth 2.0 Authorization Code request. ';
                }
            }
        },
        prepareDeviceTokenRequestParameters: function(deviceCode) {
            this.requestParameters.requestType = '@Constants.RequestTypes.DeviceToken';
            this.requestParameters.deviceCode = deviceCode;
            this.scrollToAnchor('requestParameters-panel');
        },
        prepareRefreshTokenRequestParameters: function(refreshToken) {
            this.requestParameters.requestType = '@Constants.RequestTypes.RefreshToken';
            this.requestParameters.refreshToken = refreshToken;
            this.scrollToAnchor('requestParameters-panel');
        },
        submitRequest: function(requestParameters) {
            this.submit('request', requestParameters);
        },
        submitResponse: function(response) {
            this.submit('response', response);
        },
        submit: function(path, value) {
            this.response = null;
            this.flow = null;
            this.processing = true;
            this.errorMessage = null;
            axios.post('/api/' + path, value)
                .then(response => {
                    // Make sure to also set the requestParameters coming back, e.g. to get the request parameter details
                    // for a previous request that was now responded to through a URL #fragment (e.g. implicit flow).
                    this.requestParameters = response.data.requestParameters;
                    this.response = response.data.response;
                    this.flow = response.data.flow;
                    if (response.data.requestedRedirectUrl) {
                        window.location.replace(response.data.requestedRedirectUrl);
                    }
                })
                .catch(error => {
                    console.log(error);
                    this.errorMessage = error.message;
                    toastr.error(error.message);
                })
                .finally(_ => {
                    this.processing = false;
                });
        }
    },
    created: function () {
        this.requestParameters = @Html.Raw(Json.Serialize(Model.RequestParameters));
        this.response = @Html.Raw(Json.Serialize(Model.Response));
        this.flow = @Html.Raw(Json.Serialize(Model.Flow));
        this.userConfiguration = @Html.Raw(Json.Serialize(Model.UserConfiguration));
        if (location.hash && location.hash.length > 1) {
            // If there are parameters in the #fragment of the URL, this is likely an external auth response;
            // send it to the back-end API for processing.
            const urlFragment = location.hash.substr(1).split('&').reduce((prev, item) => Object.assign({[decodeURIComponent(item.split('=')[0]).replace(/\+/g, ' ')]: decodeURIComponent(item.split('=')[1]).replace(/\+/g, ' ')}, prev), {});
            this.submitResponse(urlFragment);
        }
    }
});
</script>
}
</section>
<div id="app">
    <div id="requestParameters-panel">
        <h3>Request</h3>
        <h5>Token Service</h5>
        <div class="form-group">
            <label for="requestParameters-authorizationEndpoint">Authorization Endpoint</label>
            <input type="text" class="form-control" id="requestParameters-authorizationEndpoint" v-model="requestParameters.authorizationEndpoint" placeholder="The URL of the Authorization Endpoint">
        </div>
        <div class="form-group">
            <label for="requestParameters-tokenEndpoint">Token Endpoint</label>
            <input type="text" class="form-control" id="requestParameters-tokenEndpoint" v-model="requestParameters.tokenEndpoint" placeholder="The URL of the Token endpoint">
        </div>
        <div class="form-group">
            <label for="requestParameters-deviceCodeEndpoint">Device Code Endpoint</label>
            <input type="text" class="form-control" id="requestParameters-deviceCodeEndpoint" v-model="requestParameters.deviceCodeEndpoint" placeholder="The URL of the Device Code endpoint">
        </div>
        <h5>Client App</h5>
        <div class="form-group">
            <label for="requestParameters-clientId">Client ID</label>
            <input type="text" class="form-control" id="requestParameters-clientId" v-model="requestParameters.clientId" placeholder="The client ID of the app registered with the token service">
        </div>
        <div class="form-group">
            <label for="requestParameters-clientSecret">Client Secret</label>
            <input type="password" class="form-control" id="requestParameters-clientSecret" v-model="requestParameters.clientSecret" placeholder="The client secret of the app registered with the token service">
        </div>
        <h5>Request</h5>

        <div class="mb-2">
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-openIdConnect" value="@Constants.RequestTypes.OpenIdConnect" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-openIdConnect">OpenID Connect</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-implicit" value="@Constants.RequestTypes.Implicit" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-implicit">OAuth 2.0 Implicit Grant</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-authorizationCode" value="@Constants.RequestTypes.AuthorizationCode" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-authorizationCode">OAuth 2.0 Authorization Code Grant</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-clientCredentials" value="@Constants.RequestTypes.ClientCredentials" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-clientCredentials">OAuth 2.0 Client Credentials Grant</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-refreshToken" value="@Constants.RequestTypes.RefreshToken" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-refreshToken">OAuth 2.0 Refresh Token Grant</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-resourceOwnerPasswordCredentials" value="@Constants.RequestTypes.ResourceOwnerPasswordCredentials" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-resourceOwnerPasswordCredentials">OAuth 2.0 Resource Owner Password Credentials Grant</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-deviceCode" value="@Constants.RequestTypes.DeviceCode" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-deviceCode">OAuth 2.0 Device Authorization Grant - Code Request</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="requestParameters-requestType" id="requestParameters-requestType-deviceToken" value="@Constants.RequestTypes.DeviceToken" v-model="requestParameters.requestType">
                <label class="form-check-label" for="requestParameters-requestType-deviceToken">OAuth 2.0 Device Authorization Grant - Token Request</label>
            </div>
        </div>

        <div class="form-group">
            <label for="requestParameters-scope">Scope</label>
            <input type="text" class="form-control" id="requestParameters-scope" v-model="requestParameters.scope" placeholder="The scope to request">
        </div>

        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.OpenIdConnect' || requestParameters.requestType === '@Constants.RequestTypes.Implicit' || requestParameters.requestType === '@Constants.RequestTypes.AuthorizationCode'">
            <div class="form-group">
                <label for="requestParameters-responseType">Response Type (<code>id_token</code>, <code>token</code>, <code>code</code>, ...)</label>
                <input type="text" class="form-control" id="requestParameters-responseType" v-model="requestParameters.responseType" placeholder="The response type">
            </div>
            <div class="form-group">
                <label for="requestParameters-responseMode">Response Mode (<code>form_post</code>, <code>query</code>, <code>fragment</code>, ...)</label>
                <input type="text" class="form-control" id="requestParameters-responseMode" v-model="requestParameters.responseMode" placeholder="The response mode">
            </div>
        </div>

        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.RefreshToken'">
            <div class="form-group">
                <label for="requestParameters-deviceCode">Refresh Token</label>
                <input type="text" class="form-control" id="requestParameters-refreshToken" v-model="requestParameters.refreshToken" placeholder="The refresh token">
            </div>
        </div>

        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.DeviceToken'">
            <div class="form-group">
                <label for="requestParameters-deviceCode">Device Code</label>
                <input type="text" class="form-control" id="requestParameters-deviceCode" v-model="requestParameters.deviceCode" placeholder="The device code">
            </div>
        </div>

        <div v-if="requestParameters.requestType === '@Constants.RequestTypes.ResourceOwnerPasswordCredentials'">
            <div class="form-group">
                <label for="requestParameters-userName">User Name</label>
                <input type="text" class="form-control" id="requestParameters-userName" v-model="requestParameters.userName" placeholder="The user name of the resource owner">
            </div>
            <div class="form-group">
                <label for="requestParameters-password">Password</label>
                <input type="password" class="form-control" id="requestParameters-password" v-model="requestParameters.password" placeholder="The password of the resource owner">
            </div>
        </div>

        <div v-if="validationMessage" class="mt-2">
            <div class="alert alert-warning">{{ validationMessage }}</div>
        </div>

        <button v-on:click="submitRequest(requestParameters)" class="btn btn-primary mt-1" v-bind:disabled="processing">
            Submit
            <i v-if="processing" class="fas fa-spinner fa-spin"></i>
        </button>

        <div v-if="errorMessage" class="mt-2">
            <div class="alert alert-danger">{{ errorMessage }}</div>
        </div>

    </div>
    <div id="response-panel" v-if="response" class="mt-3">
        <h2>Response</h2>

        <div v-if="response.error">
            <h5 class="mt-2">Error</h5>
            <div class="alert alert-danger">
                <h4 class="alert-heading">{{ response.error }}</h4>
                <div v-if="response.errorDescription">{{ response.errorDescription }}</div>
            </div>
        </div>

        <div v-if="response.deviceCode">
            <h5 class="mt-2">Device Code</h5>
            <div>To sign in, use a web browser to open the page <a v-bind:href="response.deviceCodeVerificationUri" target="_blank">{{ response.deviceCodeVerificationUri }}</a> and enter the code <code>{{ response.deviceUserCode }}</code> to authenticate.</div>
            <button v-on:click="prepareDeviceTokenRequestParameters(response.deviceCode)" class="btn btn-primary">Prepare Device Token Request</button>
        </div>

        <div v-if="response.idToken">
            <h5 class="mt-2">ID Token</h5>
            <div><a v-bind:href="'https://jwt.ms/#id_token=' + response.idToken" target="_blank">Decode</a></div>
            <div class="mt-2"><code>{{ response.idToken }}</code></div>
        </div>

        <div v-if="response.accessToken">
            <h5 class="mt-2">Access Token</h5>
            <div v-if="response.tokenType">Token Type: <code>{{ response.tokenType }}</code></div>
            <div v-if="response.expiresIn">Expires In: <code>{{ response.expiresIn }}</code></div>
            <div><a v-bind:href="'https://jwt.ms/#id_token=' + response.accessToken" target="_blank">Decode</a></div>
            <div class="mt-2"><code>{{ response.accessToken }}</code></div>
        </div>

        <div v-if="response.refreshToken">
            <h5 class="mt-2">Refresh Token</h5>
            <div class="mt-2"><code>{{ response.refreshToken }}</code></div>
            <button v-on:click="prepareRefreshTokenRequestParameters(response.refreshToken)" class="btn btn-primary">Prepare Refresh Token Request</button>
        </div>

        <div v-if="response.raw">
            <h5 class="mt-2">Raw Response</h5>
            <pre><code>{{ response.raw }}</code></pre>
        </div>
    </div>
</div>